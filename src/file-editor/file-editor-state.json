{
  "filePath": "gpt-home/Popup.d.ts",
  "windowSize": 20,
  "windowStart": 135,
  "content": "import * as React from 'react'\nimport * as Popper from '@popperjs/core'\n\nimport { SemanticShorthandItem } from '../../generic'\nimport { StrictPortalProps } from '../../addons/Portal'\nimport PopupContent, { PopupContentProps } from './PopupContent'\nimport PopupHeader, { PopupHeaderProps } from './PopupHeader'\n\ntype PopperOffsetsFunctionParams = {\n  popper: Popper.Rect\n  reference: Popper.Rect\n  placement: Popper.Placement\n}\ntype PopperOffsetsFunction = (params: PopperOffsetsFunctionParams) => [number?, number?]\n\nexport interface PopupProps extends StrictPopupProps {\n  [key: string]: any\n}\n\nexport interface StrictPopupProps extends StrictPortalProps {\n  /** An element type to render as (string or function). */\n  as?: any\n\n  /** Display the popup without the pointing arrow */\n  basic?: boolean\n\n  /** Primary content. */\n  children?: React.ReactNode\n\n  /** Additional classes. */\n  className?: string\n\n  /** Simple text content for the popover. */\n  content?: SemanticShorthandItem<PopupContentProps>\n\n  /** Existing element the pop-up should be bound to. */\n  context?: Document | Window | HTMLElement | React.RefObject<HTMLElement>\n\n  /** A disabled popup only renders its trigger. */\n  disabled?: boolean\n\n  /** Enables the Popper.js event listeners. */\n  eventsEnabled?: boolean\n\n  /** A flowing Popup has no maximum width and continues to flow to fit its content. */\n  flowing?: boolean\n\n  /** Header displayed above the content in bold. */\n  header?: SemanticShorthandItem<PopupHeaderProps>\n\n  /** Hide the Popup when scrolling the window. */\n  hideOnScroll?: boolean\n\n  /** Whether the popup should not close on hover. */\n  hoverable?: boolean\n\n  /** Invert the colors of the popup */\n  inverted?: boolean\n\n  /**\n   * Offset values in px unit to apply to rendered popup. The basic offset accepts an\n   * array with two numbers in the form [skidding, distance]:\n   * - `skidding` displaces the Popup along the reference element\n   * - `distance` displaces the Popup away from, or toward, the reference element in the direction of its placement. A positive number displaces it further away, while a negative number lets it overlap the reference.\n   *\n   * @see https://popper.js.org/docs/v2/modifiers/offset/\n   */\n  offset?: [number, number?] | PopperOffsetsFunction\n\n  /** Events triggering the popup. */\n  on?: 'hover' | 'click' | 'focus' | ('hover' | 'click' | 'focus')[]\n\n  /**\n   * Called when a close event happens.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClose?: (event: React.MouseEvent<HTMLElement>, data: PopupProps) => void\n\n  /**\n   * Called when the portal is mounted on the DOM.\n   *\n   * @param {null}\n   * @param {object} data - All props.\n   */\n  onMount?: (nothing: null, data: PopupProps) => void\n\n  /**\n   * Called when an open event happens.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onOpen?: (event: React.MouseEvent<HTMLElement>, data: PopupProps) => void\n\n  /**\n   * Called when the portal is unmounted from the DOM.\n   *\n   * @param {null}\n   * @param {object} data - All props.\n   */\n  onUnmount?: (nothing: null, data: PopupProps) => void\n\n  /** Disables automatic repositioning of the component, it will always be placed according to the position value. */\n  pinned?: boolean\n\n  /** Position for the popover. */\n  position?:\n    | 'top left'\n    | 'top right'\n    | 'bottom right'\n    | 'bottom left'\n    | 'right center'\n    | 'left center'\n    | 'top center'\n    | 'bottom center'\n\n  /** Tells `Popper.js` to use the `position: fixed` strategy to position the popover. */\n  positionFixed?: boolean\n\n  /** A wrapping element for an actual content that will be used for positioning. */\n  popper?: SemanticShorthandItem<React.HTMLAttributes<HTMLDivElement>>\n\n  /** An array containing custom settings for the Popper.js modifiers. */\n  popperModifiers?: any[]\n\n  /** A popup can have dependencies which update will schedule a position update. */\n  popperDependencies?: any[]\n\n  /** Popup size. */\n  size?: 'mini' | 'tiny' | 'small' | 'large' | 'huge'\n\n  /** Custom Popup style. */\n  style?: React.CSSProperties\n\n  /** Element to be rendered in-place where the popup is defined. */\n  trigger?: React.ReactNode\n\n  /**\n   * Defines the width of the Popup.\n   * This can be set to any CSS valid value.\n   * By default, the width of the Popup is determined by the content it contains.\n   */\n  wide?: boolean | 'very'\n}\n\ninterface PopupComponent extends React.ComponentClass<PopupProps> {\n  Content: typeof PopupContent\n  Header: typeof PopupHeader\n}\n\ndeclare const Popup: PopupComponent\n\nexport default Popup"
}